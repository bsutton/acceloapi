package au.com.noojee.acceloapi.entities.meta;

import static org.reflections.ReflectionUtils.getAllFields;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.HashSet;
import java.util.Set;

import org.reflections.Reflections;

import au.com.noojee.acceloapi.entities.AcceloEntity;

public class FieldMetaDataGenerator
{

	private static final String AU_COM_NOOJEE_ACCELOAPI_ENTITIES = "au.com.noojee.acceloapi.entities";

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static void main(String[] args)
	{

		Reflections reflections = new Reflections(AU_COM_NOOJEE_ACCELOAPI_ENTITIES);

		
		Set<Class<? extends AcceloEntity>> entityClasses = reflections.getSubTypesOf(AcceloEntity.class);

		for (Class<? extends AcceloEntity> entityClass : entityClasses)
		{
			Set<Field> fields = getAllFields(entityClass);

			writeMetaClass(entityClass, fields);

		}

	}

	private static void writeMetaClass(@SuppressWarnings("rawtypes") Class<? extends AcceloEntity> entityClass, Set<Field> fields)
	{
		File workingDir = new File(System.getProperty("user.dir"), "src/main/java");
		File packageDir = new File((AU_COM_NOOJEE_ACCELOAPI_ENTITIES + ".meta").replace('.', File.separatorChar));

		File classFile = new File(workingDir, new File(packageDir, entityClass.getSimpleName() + "_.java").getPath());

		try (PrintWriter pf = new PrintWriter(classFile))
		{
			String className = entityClass.getSimpleName();

			pf.println("package au.com.noojee.acceloapi.entities.meta;");
			pf.println();
			pf.println("/** ");
			pf.println(" *");
			pf.println(" *          DO NOT MODIFY ");
			pf.println(" *");
			pf.println(" * This code is generated by " + FieldMetaDataGenerator.class.getName());
			pf.println(" *");
			pf.println(" *          DO NOT MODIFY ");
			pf.println(" *");
			pf.println(" */");

			pf.println("import au.com.noojee.acceloapi.entities." + className + ";");

				Set<String> imports = new HashSet<String>();
			
			/**
			 * Special processing for LocalDate as these aren't in the fields but we convert longs to LocalDates for date fields.
			 * 
			 */
			for (Field field : fields)
			{
				if (field.isAnnotationPresent(AcceloField.class))
				{
					AcceloField acceloFieldType = field.getAnnotation(AcceloField.class);
					if (acceloFieldType.value() == AcceloField.Type.DATE)
					{
						imports.add("java.time.LocalDate");
						break;
					}
				}
			}
			
			/**
			 * Find any custom imports we need to ouput.
			 */
			for (Field field : fields)
			{
				Class<?> type = field.getType();
				if (field.isAnnotationPresent(AcceloField.class))
				{
					if (!type.getName().startsWith("java.lang") && !type.isPrimitive())
					{
						// nested packages have a $ in the name.
						imports.add(type.getName().replace('$', '.'));;
					}
				}
			}
			
			
			/**
			 * Now output the imports
			 */
			for (String imported : imports)
			{
				pf.println("import " + imported + ";");
			}


			/**
			 * Finally generate the class
			 */
			pf.println();
			pf.println();
			pf.println("public class " + className + "_ ");
			pf.println("{");
			pf.println();
			
			/**
			 * Now out put a line per annotated filed.
			 */
			for (Field field : fields)
			{
				Class<?> type = field.getType();
				Class<?> objectType = toObjectType(type);
				String fieldName = field.getName();

				if (field.isAnnotationPresent(AcceloField.class))
				{
					AcceloField acceloFieldType = field.getAnnotation(AcceloField.class);
					if (acceloFieldType.value() == AcceloField.Type.DATE)
						pf.println("\tpublic static FilterField<" + className + ", LocalDate> "
								+ fieldName + " = new FilterField<>(\"" + fieldName + "\"); ");
					else
						pf.println("\tpublic static FilterField<" + className + ", " + objectType.getSimpleName() + "> "
								+ fieldName + " = new FilterField<>(\"" + fieldName + "\"); ");
				}
			}
			pf.println();
			pf.println("}");

		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static Class<?> toObjectType(Class<?> type)
	{
		Class<?> convertedType = type;

		if (type == long.class)
		{
			convertedType = Long.class;
		}
		else if (type == int.class)
		{
			convertedType = Integer.class;
		}
		if (type == float.class)
		{
			convertedType = Float.class;
		}
		if (type == double.class)
		{
			convertedType = Double.class;
		}
		return convertedType;
	}

}

/**
 * package au.com.noojee.acceloapi.entities.meta; import au.com.noojee.acceloapi.entities.Company; public class Company_
 * { public static FilterField<Company, Integer> id = new FilterField<>("id"); }
 */
